version: '3.8'

services:
  # FastAPI Backend (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: tender_backend_prod
    command: gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URI=${DATABASE_URI}
      - MONGO_DATABASE_URI=${MONGO_DATABASE_URI}
      - REDIS_URL=${REDIS_URL}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
      - SECRET_KEY=${SECRET_KEY}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: tender_postgres_prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups/postgres:/backups
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # MongoDB Database (Production)
  mongodb:
    image: mongo:7-jammy
    container_name: tender_mongodb_prod
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./backups/mongodb:/backups
    command: >
      mongod
      --auth
      --bind_ip_all
      --wiredTigerCacheSizeGB 0.5
      --wiredTigerCollectionBlockCompressor snappy
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: tender_redis_prod
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"

  # Celery Worker (Production)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: tender_celery_worker_prod
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URI=${DATABASE_URI}
      - MONGO_DATABASE_URI=${MONGO_DATABASE_URI}
      - REDIS_URL=${REDIS_URL}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
      - SECRET_KEY=${SECRET_KEY}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  # Celery Beat (Production)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: tender_celery_beat_prod
    command: celery -A app.celery_app beat --loglevel=info --scheduler redbeat.RedBeatScheduler
    environment:
      - ENVIRONMENT=production
      - DATABASE_URI=${DATABASE_URI}
      - MONGO_DATABASE_URI=${MONGO_DATABASE_URI}
      - REDIS_URL=${REDIS_URL}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
      - SECRET_KEY=${SECRET_KEY}
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"

  # Ollama AI Service (Production)
  ollama:
    image: ollama/ollama:latest
    container_name: tender_ollama_prod
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_DEBUG=false
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        # GPU support (uncomment if you have NVIDIA GPU)
        # reservations:
        #   devices:
        #     - driver: nvidia
        #       count: all
        #       capabilities: [gpu]

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tender_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - backend_network
    restart: unless-stopped

  # Backup Service
  backup:
    image: alpine:latest
    container_name: tender_backup
    volumes:
      - postgres_data:/data/postgres:ro
      - mongodb_data:/data/mongodb:ro
      - redis_data:/data/redis:ro
      - ./backups:/backups
      - ./scripts:/scripts:ro
    command: >
      sh -c "
      while true; do
        echo 'Running backup...'
        /scripts/backup.sh
        echo 'Backup completed. Sleeping for 24 hours...'
        sleep 86400
      done
      "
    depends_on:
      - postgres
      - mongodb
      - redis
    networks:
      - backend_network
    restart: unless-stopped

# Volumes
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local

# Networks
networks:
  backend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
