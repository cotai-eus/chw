version: '3.8'

services:
  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: tender_backend
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_poetry_cache:/root/.cache/pypoetry
    environment:
      - ENVIRONMENT=development
      - DATABASE_URI=postgresql+asyncpg://postgres:postgres@postgres:5432/tender_platform
      - MONGO_DATABASE_URI=mongodb://mongo_user:mongo_password@mongodb:27017/tender_platform
      - REDIS_URL=redis://redis:6379
      - OLLAMA_API_URL=http://ollama:11434
      - SECRET_KEY=your-super-secret-development-key-change-in-production
      - CREATE_INITIAL_DATA=true
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tender_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tender_platform
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tender_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend_network
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: tender_mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=tender_platform
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - backend_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tender_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: tender_celery_worker
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2
    volumes:
      - ./backend:/app
      - backend_poetry_cache:/root/.cache/pypoetry
    environment:
      - ENVIRONMENT=development
      - DATABASE_URI=postgresql+asyncpg://postgres:postgres@postgres:5432/tender_platform
      - MONGO_DATABASE_URI=mongodb://mongo_user:mongo_password@mongodb:27017/tender_platform
      - REDIS_URL=redis://redis:6379
      - OLLAMA_API_URL=http://ollama:11434
      - SECRET_KEY=your-super-secret-development-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - backend_network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: tender_celery_beat
    command: celery -A app.celery_app beat --loglevel=info --scheduler redbeat.RedBeatScheduler
    volumes:
      - ./backend:/app
      - backend_poetry_cache:/root/.cache/pypoetry
    environment:
      - ENVIRONMENT=development
      - DATABASE_URI=postgresql+asyncpg://postgres:postgres@postgres:5432/tender_platform
      - MONGO_DATABASE_URI=mongodb://mongo_user:mongo_password@mongodb:27017/tender_platform
      - REDIS_URL=redis://redis:6379
      - OLLAMA_API_URL=http://ollama:11434
      - SECRET_KEY=your-super-secret-development-key-change-in-production
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - backend_network
    restart: unless-stopped

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: tender_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=2
    networks:
      - backend_network
    restart: unless-stopped
    # GPU support (uncomment if you have NVIDIA GPU)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  # Flower (Celery monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: tender_flower
    command: celery -A app.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped

  # Redis Commander (Redis GUI)
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: tender_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped

  # pgAdmin (PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tender_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped

  # Mongo Express (MongoDB GUI)
  mongo_express:
    image: mongo-express:latest
    container_name: tender_mongo_express
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin
      - ME_CONFIG_MONGODB_URL=mongodb://admin:admin@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    ports:
      - "8082:8081"
    depends_on:
      - mongodb
    networks:
      - backend_network
    restart: unless-stopped

# Volumes
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_poetry_cache:
    driver: local

# Networks
networks:
  backend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
